import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Copy, Plus, Settings, CheckCircle, AlertCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

function RedtrackConfigManager() {
  const [redtrackDomain, setRedtrackDomain] = useState('');
  const [generatedTag, setGeneratedTag] = useState('');
  const { toast } = useToast();

  const generateTrackingTag = () => {
    if (!redtrackDomain.trim()) {
      toast({
        title: 'Error',
        description: 'Please enter your RedTrack domain',
        variant: 'destructive',
      });
      return;
    }

    const trackingCode = `<!-- RedTrack Tracking Tag - Generated by CallCenter Pro -->
<script>
  (function() {
    // RedTrack Integration Script with Security Enhancements
    window.redtrackConfig = {
      domain: '${redtrackDomain}',
      endpoint: window.location.origin + '/api/tracking/redtrack',
      // Security and timeout configurations
      maxRetries: 3,
      timeoutMs: 5000,
      retryDelayMs: 1000,
      clickIdPollingTimeout: 30000, // 30 seconds max for clickID polling
      clickIdMaxRetries: 5
    };
    
    // Enhanced fetch with timeout and retry logic
    window.redtrackSecureFetch = function(url, options = {}, retryCount = 0) {
      const config = window.redtrackConfig;
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), config.timeoutMs);
      
      return fetch(url, {
        ...options,
        signal: controller.signal,
        headers: {
          'Content-Type': 'application/json',
          ...options.headers
        }
      }).then(response => {
        clearTimeout(timeoutId);
        return response;
      }).catch(error => {
        clearTimeout(timeoutId);
        if (retryCount < config.maxRetries && !controller.signal.aborted) {
          console.log(\`RedTrack retry \${retryCount + 1}/\${config.maxRetries} for \${url}\`);
          return new Promise(resolve => {
            setTimeout(() => {
              resolve(window.redtrackSecureFetch(url, options, retryCount + 1));
            }, config.retryDelayMs * (retryCount + 1)); // Exponential backoff
          });
        }
        throw error;
      });
    };
    
    // Capture URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const trackingData = {
      clickid: urlParams.get('clickid'),
      campaign_id: urlParams.get('campaign_id') || urlParams.get('cid'),
      offer_id: urlParams.get('offer_id') || urlParams.get('oid'),
      source: urlParams.get('source') || urlParams.get('utm_source'),
      medium: urlParams.get('medium') || urlParams.get('utm_medium'),
      campaign: urlParams.get('campaign') || urlParams.get('utm_campaign'),
      timestamp: new Date().toISOString(),
      url: window.location.href,
      referrer: document.referrer || 'direct',
      userAgent: navigator.userAgent
    };
    
    // Enhanced clickID validation and polling with timeout protection
    if (trackingData.clickid) {
      sessionStorage.setItem('redtrack_data', JSON.stringify(trackingData));
      console.log('RedTrack data captured:', trackingData);
      
      // clickID polling with timeout and retry limits
      let clickIdPollingAttempts = 0;
      const clickIdPollingStart = Date.now();
      
      function pollClickIdStatus() {
        const elapsedTime = Date.now() - clickIdPollingStart;
        clickIdPollingAttempts++;
        
        // Timeout protection - prevent infinite loops
        if (elapsedTime > window.redtrackConfig.clickIdPollingTimeout) {
          console.log('RedTrack clickID polling timeout after', elapsedTime, 'ms');
          return;
        }
        
        if (clickIdPollingAttempts > window.redtrackConfig.clickIdMaxRetries) {
          console.log('RedTrack clickID polling max retries reached:', clickIdPollingAttempts);
          return;
        }
        
        // Check if clickID is still valid (basic validation)
        if (trackingData.clickid && trackingData.clickid.length > 5) {
          console.log(\`RedTrack clickID validated after \${clickIdPollingAttempts} attempts\`);
        } else {
          // Retry after delay, but with timeout protection
          setTimeout(pollClickIdStatus, 2000);
        }
      }
      
      // Start polling if needed
      if (trackingData.clickid) {
        pollClickIdStatus();
      }
    }
    
    // Send initial tracking event with enhanced security
    window.redtrackSecureFetch(window.redtrackConfig.endpoint + '/session', {
      method: 'POST',
      body: JSON.stringify(trackingData)
    }).catch(e => console.log('RedTrack tracking error:', e));
    
    // Enhanced phone click tracking with security and timeout protection
    document.addEventListener('click', function(e) {
      const target = e.target.closest('a[href^="tel:"]');
      if (target && trackingData.clickid) {
        const phoneNumber = target.href.replace('tel:', '');
        
        // Enhanced conversion tracking with retry logic
        window.redtrackSecureFetch(window.redtrackConfig.endpoint + '/conversion', {
          method: 'POST',
          body: JSON.stringify({
            ...trackingData,
            eventType: 'phone_click',
            phoneNumber: phoneNumber,
            conversionValue: 25.00 // Default value
          })
        }).catch(e => console.log('RedTrack conversion error:', e));
        
        // Enhanced postback to RedTrack with timeout protection
        if (window.redtrackConfig.domain && trackingData.clickid) {
          const postbackUrl = \`https://\${window.redtrackConfig.domain}/postback?clickid=\${trackingData.clickid}&sum=25&type=ConvertedCall\`;
          
          // Use enhanced fetch for postback with timeout
          window.redtrackSecureFetch(postbackUrl, { 
            method: 'GET', 
            mode: 'no-cors' 
          }).catch(error => {
            console.log('RedTrack postback failed after retries:', error.message);
          });
        }
      }
    });
    
    // Cleanup function to prevent memory leaks
    window.addEventListener('beforeunload', function() {
      if (window.redtrackConfig && window.redtrackConfig.cleanupTimers) {
        window.redtrackConfig.cleanupTimers.forEach(timer => clearTimeout(timer));
      }
    });
  })();
</script>`;

    setGeneratedTag(trackingCode);
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(generatedTag);
    toast({
      title: 'Copied!',
      description: 'Tracking tag copied to clipboard',
    });
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Settings className="h-5 w-5" />
          RedTrack Configuration
        </CardTitle>
        <CardDescription>
          Generate tracking tags for your RedTrack campaigns
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="domain">RedTrack Domain</Label>
          <Input
            id="domain"
            placeholder="e.g., your-domain.redtrack.io"
            value={redtrackDomain}
            onChange={(e) => setRedtrackDomain(e.target.value)}
          />
        </div>

        <Button onClick={generateTrackingTag} className="w-full">
          <Plus className="h-4 w-4 mr-2" />
          Generate Tracking Tag
        </Button>

        {generatedTag && (
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <Badge variant="secondary" className="bg-green-100 text-green-800">
                <CheckCircle className="h-3 w-3 mr-1" />
                Tag Generated
              </Badge>
              <Button size="sm" variant="outline" onClick={copyToClipboard}>
                <Copy className="h-4 w-4 mr-1" />
                Copy
              </Button>
            </div>
            
            <div className="bg-gray-50 dark:bg-gray-900 p-4 rounded-lg border">
              <pre className="text-xs overflow-x-auto whitespace-pre-wrap">
                {generatedTag}
              </pre>
            </div>
            
            <div className="bg-blue-50 dark:bg-blue-950/20 p-3 rounded border border-blue-200 dark:border-blue-800">
              <div className="flex items-start gap-2">
                <AlertCircle className="h-4 w-4 text-blue-600 mt-0.5" />
                <div className="text-sm">
                  <strong>Installation Instructions:</strong>
                  <p className="mt-1 text-muted-foreground">
                    Add this tag to the &lt;head&gt; section of your landing pages. 
                    It will automatically capture RedTrack parameters and track phone conversions.
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}

export default RedtrackConfigManager;