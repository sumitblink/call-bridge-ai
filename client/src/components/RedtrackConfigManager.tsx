import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Copy, Plus, Settings, CheckCircle, AlertCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

function RedtrackConfigManager() {
  const [redtrackDomain, setRedtrackDomain] = useState('');
  const [generatedTag, setGeneratedTag] = useState('');
  const { toast } = useToast();

  const generateTrackingTag = () => {
    if (!redtrackDomain.trim()) {
      toast({
        title: 'Error',
        description: 'Please enter your RedTrack domain',
        variant: 'destructive',
      });
      return;
    }

    const trackingCode = `<!-- RedTrack Tracking Tag - Generated by CallCenter Pro -->
<script>
  (function() {
    // RedTrack Integration Script
    window.redtrackConfig = {
      domain: '${redtrackDomain}',
      endpoint: window.location.origin + '/api/tracking/redtrack'
    };
    
    // Capture URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const trackingData = {
      clickid: urlParams.get('clickid'),
      campaign_id: urlParams.get('campaign_id') || urlParams.get('cid'),
      offer_id: urlParams.get('offer_id') || urlParams.get('oid'),
      source: urlParams.get('source') || urlParams.get('utm_source'),
      medium: urlParams.get('medium') || urlParams.get('utm_medium'),
      campaign: urlParams.get('campaign') || urlParams.get('utm_campaign'),
      timestamp: new Date().toISOString(),
      url: window.location.href,
      referrer: document.referrer || 'direct',
      userAgent: navigator.userAgent
    };
    
    // Store in session for later use
    if (trackingData.clickid) {
      sessionStorage.setItem('redtrack_data', JSON.stringify(trackingData));
      console.log('RedTrack data captured:', trackingData);
    }
    
    // Send initial tracking event
    fetch(window.redtrackConfig.endpoint + '/session', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(trackingData)
    }).catch(e => console.log('RedTrack tracking error:', e));
    
    // Track phone clicks for conversion
    document.addEventListener('click', function(e) {
      const target = e.target.closest('a[href^="tel:"]');
      if (target && trackingData.clickid) {
        fetch(window.redtrackConfig.endpoint + '/conversion', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            ...trackingData,
            eventType: 'phone_click',
            phoneNumber: target.href.replace('tel:', ''),
            conversionValue: 25.00 // Default value
          })
        }).catch(e => console.log('RedTrack conversion error:', e));
        
        // Send postback to RedTrack
        if (window.redtrackConfig.domain) {
          const postbackUrl = \`https://\${window.redtrackConfig.domain}/postback?clickid=\${trackingData.clickid}&sum=25&type=ConvertedCall\`;
          fetch(postbackUrl, { method: 'GET', mode: 'no-cors' }).catch(() => {});
        }
      }
    });
  })();
</script>`;

    setGeneratedTag(trackingCode);
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(generatedTag);
    toast({
      title: 'Copied!',
      description: 'Tracking tag copied to clipboard',
    });
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Settings className="h-5 w-5" />
          RedTrack Configuration
        </CardTitle>
        <CardDescription>
          Generate tracking tags for your RedTrack campaigns
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="domain">RedTrack Domain</Label>
          <Input
            id="domain"
            placeholder="e.g., your-domain.redtrack.io"
            value={redtrackDomain}
            onChange={(e) => setRedtrackDomain(e.target.value)}
          />
        </div>

        <Button onClick={generateTrackingTag} className="w-full">
          <Plus className="h-4 w-4 mr-2" />
          Generate Tracking Tag
        </Button>

        {generatedTag && (
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <Badge variant="secondary" className="bg-green-100 text-green-800">
                <CheckCircle className="h-3 w-3 mr-1" />
                Tag Generated
              </Badge>
              <Button size="sm" variant="outline" onClick={copyToClipboard}>
                <Copy className="h-4 w-4 mr-1" />
                Copy
              </Button>
            </div>
            
            <div className="bg-gray-50 dark:bg-gray-900 p-4 rounded-lg border">
              <pre className="text-xs overflow-x-auto whitespace-pre-wrap">
                {generatedTag}
              </pre>
            </div>
            
            <div className="bg-blue-50 dark:bg-blue-950/20 p-3 rounded border border-blue-200 dark:border-blue-800">
              <div className="flex items-start gap-2">
                <AlertCircle className="h-4 w-4 text-blue-600 mt-0.5" />
                <div className="text-sm">
                  <strong>Installation Instructions:</strong>
                  <p className="mt-1 text-muted-foreground">
                    Add this tag to the &lt;head&gt; section of your landing pages. 
                    It will automatically capture RedTrack parameters and track phone conversions.
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}

export default RedtrackConfigManager;